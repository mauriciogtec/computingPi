input = list(x=c(.2,.1),y=c(.5,.2))
plot(input$x, input$y, xlim=c(0,1), ylim=c(0,1))
plot(input$x, input$y, xlim=c(0,1), ylim=c(0,1), col="b")
plot(input$x, input$y, xlim=c(0,1), ylim=c(0,1), col="blue")
plot(input$x, input$y, xlim=c(0,1), ylim=c(0,1), fil="blue")
plot(input$x, input$y, xlim=c(0,1), ylim=c(0,1), fill="blue")
plot(input$x, input$y, xlim=c(0,1), ylim=c(0,1), col="blue", lty=1)
plot(input$x, input$y, xlim=c(0,1), ylim=c(0,1), col="blue", lty=1)
plot(input$x, input$y, xlim=c(0,1), ylim=c(0,1), col="blue", lty=3)
plot(input$x, input$y, xlim=c(0,1), ylim=c(0,1), col="blue", lty=4)
plot(input$x, input$y, xlim=c(0,1), ylim=c(0,1), bg="blue")
plot(input$x, input$y, xlim=c(0,1), ylim=c(0,1), pch=16)
plot(input$x, input$y, xlim = c(0,1), ylim = c(0,1), pch = 16, col = "blue")
plot(function(x) sqrt(1-x^2), col = ""red)
plot(function(x) sqrt(1-x^2), col = "red")
plot(input$x, input$y, xlim = c(0,1), ylim = c(0,1), pch = 16, col = "blue")
plot(function(x) sqrt(1-x^2), col = "red", add = TRUE)
?actionButton
library(shiny)
?actionButton
which(input$x^2 + input$y^2 <= 1)
sum(input$x^2 + input$y^2 <= 1)
frac.inside <- sum(input$x^2 + input$y^2 <= 1)/length(input$x)
frac.inside
frac.inside <- sum(x.coord^2 + y.coord^2 <= 1)/length(input$x)
set.seed(110011) # good.practice
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
frac.inside <- sum(x.coord^2 + y.coord^2 <= 1)/length(input$x)
input <- list(nsim=10)
set.seed(110011) # good.practice
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
x.coord
plot(x.coord, y.coord, xlim = c(0,1), ylim = c(0,1), pch = 16, col = "blue")
plot(function(x) sqrt(1-x^2), col = "red", add = TRUE)
set.seed(110011) # good.practice
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
set.seed(1) # good.practice
set.seed(10e3) # good.practice
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
plot(x.coord, y.coord, xlim = c(0,1), ylim = c(0,1), pch = 16, col = "blue")
plot(function(x) sqrt(1-x^2), col = "red", add = TRUE)
frac.inside <- sum(x.coord^2 + y.coord^2 <= 1)/length(input$x)
frac.inside
x.coord^2 + y.coord^2 <= 1
frac.inside <- sum(x.coord^2 + y.coord^2 <= 1)/input$nsim
frac.inside
paste("Fraction of points inside:", frac.inside, "\n PI estimate: 4*above=", 4*frac.inside)
paste("Fraction of points inside:", frac.inside, "\\n PI estimate: 4*above=", 4*frac.inside)
paste("PI estimate: 4*above=", 4*frac.inside)
paste("Fraction of points inside:", frac.inside)
paste("PI estimate: 4*above=", 4*frac.inside)
?printOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?sliderInput
set.seed(10e3) # good.practice
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
shiny::runApp()
in.or.out <- x.coord^2 + y.coord^2
in.or.out
in.or.out <- (x.coord^2 + y.coord^2 <= 1)
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
in.or.out
set.seed(10e3) # good.practice
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
in.or.out <- (x.coord^2 + y.coord^2 <= 1)
qplot(x.coord, y.coord, xlim = c(0,1), ylim = c(0,1), colour = in.or.out)
library(ggplot2)
qplot(x.coord, y.coord, xlim = c(0,1), ylim = c(0,1), colour = in.or.out)
qplot(x.coord, y.coord, xlim = c(0,1), ylim = c(0,1), colour = in.or.out)
+ stat_function(fun = function(x) sqrt(1-x^2))
+ qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line")
qplot(x.coord, y.coord, xlim = c(0,1), ylim = c(0,1), colour = in.or.out)
qplot(x.coord, y.coord, xlim = c(0,1), ylim = c(0,1), colour = in.or.out) +
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line")
n
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x.coord^2), geom = "line")
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line")
qplot(x.coord, y.coord, xlim = c(0,1), ylim = c(0,1), colour = in.or.out) +
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line")
qplot(x.coord, y.coord, xlim = c(0,1), ylim = c(0,1), colour = in.or.out) +
geom_line(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2))
ggplot() +
geom_point(data(x=x.coord, y=y.coord), xlim = c(0,1), ylim = c(0,1), colour = in.or.out)
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
ggplot() +
geom_point(x.coord, y.coord, xlim = c(0,1), ylim = c(0,1), colour = in.or.out)
points <- data.frame(x.coord, y.coord)
geom_point(data = points, xlim = c(0,1), ylim = c(0,1), colour = in.or.out)
ggplot() +
geom_point(data = points, xlim = c(0,1), ylim = c(0,1), colour = in.or.out)
ggplot() +
geom_point(data = points)
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
points <- data.frame(x.coord, y.coord)
in.or.out <- (x.coord^2 + y.coord^2 <= 1)
ggplot() +
geom_point(data = points)
ggplot() +
geom_point(data = points, aes(x = x.coord, y = y.coord))
points <- data.frame(x.coord, y.coord, in.or.out)
geom_point(data = points, aes(x = x.coord, y = y.coord), colour = in.or.out)
set.seed(10e3) # good.practice
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
in.or.out <- (x.coord^2 + y.coord^2 <= 1)
points <- data.frame(x.coord, y.coord, in.or.out)
ggplot() +
geom_point(data = points, aes(x = x.coord, y = y.coord), colour = in.or.out)
ggplot() +
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = in.or.out))
set.seed(10e3) # good.practice
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
In <- (x.coord^2 + y.coord^2 <= 1)
points <- data.frame(x.coord, y.coord, In)
ggplot() +
ggplot() + xlim(0,1) + ylim(0,1) +
geom_point(points, aes(x = x.coord, y = y.coord, colour = In)) +
stat_function(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2))
ggplot() + xlim(0,1) + ylim(0,1) +
stat_function(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2))
ggplot() + xlim(0,1) + ylim(0,1) +
stat_function(c(0,1), fun = function(x) sqrt(1-x^2))
stat_function(c(0,1), aes(x, colour = "red"), fun = function(x) sqrt(1-x^2))
ggplot() + xlim(0,1) + ylim(0,1) +
stat_function(c(0,1), aes(x, colour = "red"), fun = function(x) sqrt(1-x^2))
ggplot() + xlim(0,1) + ylim(0,1) +
stat_function(fun = function(x) sqrt(1-x^2), colour = "red")
ggplot() + xlim(0,1) + ylim(0,1) +
stat_function(c(0,1), fun = function(x) sqrt(1-x^2), colour = "red")
stat_function(c(0,1), fun = function(x) sqrt(1-x^2), colour = "red", ggeom = "line")
ggplot() + xlim(0,1) + ylim(0,1) +
stat_function(c(0,1), fun = function(x) sqrt(1-x^2), colour = "red", ggeom = "line")
ggplot() + xlim(0,1) + ylim(0,1) +
stat_function(data.frame(x = c(-5, 5)), aes(x), fun = function(x) sqrt(1-x^2), colour = "red", ggeom = "line")
ggplot()
ggplot() +
stat_function(data.frame(x = c(-5, 5)), aes(x), fun = function(x) sqrt(1-x^2), colour = "red", ggeom = "line")
ggplot() + xlim(0,1) + ylim(0,1) +
stat_function(data.frame(x = c(0, 1)), aes(x), fun = function(x) sqrt(1-x^2), colour = "red", geom = "line")
data.frame(x = c(0, 1))
ggplot() + xlim(0,1) + ylim(0,1) +
stat_function(data.frame(x = c(0, 1)), aes(x), fun = function(x) sqrt(1-x^2), geom = "line")
ggplot() +
stat_function(data.frame(x = c(0, 1)), aes(x), fun = function(x) sqrt(1-x^2), geom = "line")
ggplot() + xlim(0,1) + ylim(0,1) +
stat_function(data.frame(x = c(0, 1)), aes(x = x), fun = function(x) sqrt(1-x^2), geom = "line")
ggplot()  +
stat_function(data.frame(x = c(0, 1)), aes(x = x), fun = function(x) sqrt(1-x^2), geom = "line")
ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm)
ggplot() + stat_function(data.frame(x = c(-5, 5)), aes(x), fun = dnorm)
ggplot() + stat_function(fun = dnorm, data.frame(x = c(-5, 5)), aes(x))
ggplot(data.frame(x = c(-5, 5)), aes(x)) + stat_function(fun = dnorm)
ggplot(data.frame(dom = c(0, 1)), aes(x = dom)) + stat_function(fun = function(x) sqrt(1-x^2))
ggplot(data.frame(dom = c(0, 1)), aes(x = dom))
+ stat_function(fun = function(x) sqrt(1-x^2), colour = "red")
ggplot(data.frame(dom = c(0, 1)), aes(x = dom)) +
stat_function(fun = function(x) sqrt(1-x^2), colour = "red")
ggplot(data.frame(dom = c(0, 1)), aes(x = dom)) +
stat_function(fun = function(x) sqrt(1-x^2), colour = "red") +
geom_point(points, aes(x = x.coord, y = y.coord, colour = In))
ggplot(data.frame(dom = c(0, 1)), aes(x = dom)) +
stat_function(fun = function(x) sqrt(1-x^2), colour = "red") +
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In))
qplot(c(0,1), fun = function(x) sqrt(1-x^2))
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2))
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line")
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line") + # plot circle
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In)) # add points
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line") + # plot circle
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In, size = 3)) # add points
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line") + # plot circle
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In, size = 2)) # add points
shiny::runApp()
shiny::runApp()
shiny::runApp()
?numericInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
set.seed(10e3) # good.practice
x.coord <- runif(input$nsim)
y.coord <- runif(input$nsim)
In <- (x.coord^2 + y.coord^2 <= 1)
points <- data.frame(x.coord, y.coord, In)
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line") + # plot circle
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In, size = 2)) + # add points
+ coord_fixed() + xlab() + ylab() # aspect ratio and details
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line") + # plot circle
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In, size = 2)) + # add points
coord_fixed() + xlab() + ylab() # aspect ratio and details
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line") + # plot circle
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In, size = 2)) + # add points
coord_fixed() + xlab("") + ylab("") # aspect ratio and details
qplot(circle = c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line") + # plot circle
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In, size = 2)) + # add points
coord_fixed() + xlab("") + ylab("") # aspect ratio and details
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line") + # plot circle
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In, size = 2)) + # add points
coord_fixed() + xlab("") + ylab("") # aspect ratio and details
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line"), colour="circle") + # plot circle
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In, size = 2)) + # add points
coord_fixed() + xlab("") + ylab("") # aspect ratio and details
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line")) + # plot circle
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In, size = 2)) + # add points
coord_fixed() + xlab("") + ylab("") + theme(legend.position="none") # aspect ratio and details
stat
stat
qplot(c(0,1), stat = "function", fun = function(x) sqrt(1-x^2), geom = "line") + # plot circle
geom_point(data = points, aes(x = x.coord, y = y.coord, colour = In, size = 2)) + # add points
coord_fixed() + xlab("") + ylab("") + theme(legend.position="none") # aspect ratio and details
shiny::runApp()
shiny::runApp()
shiny::runApp()
textOutput("currentEstimate")
code(textOutput("currentEstimate"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
